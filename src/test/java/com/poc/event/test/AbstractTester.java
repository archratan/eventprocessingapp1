package com.poc.event.test;

import static org.junit.Assert.assertSame;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.core.Response;

import org.apache.log4j.Logger;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;
import org.springframework.beans.factory.annotation.Autowired;

import com.poc.event.model.EventData;
import com.poc.event.processor.impl.EventProcessor;
import com.poc.event.rest.interceptor.EventRequestAuthPlugin;
import com.poc.event.rest.sei.impl.RestEndpointEventAPIImpl;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public abstract class AbstractTester {

	@Autowired
	RestEndpointEventAPIImpl testService;
	protected static final Logger _log = Logger.getLogger(AbstractTester.class);

	public static String testEventId = getAutoGeneratedId();

	@Autowired
	EventProcessor testEventProcessor;

	@Autowired
	EventRequestAuthPlugin testAuthPlugin;

	protected String getEventId(Response resp) {
		// TODO Auto-generated method stub
		return ((EventData) resp.getEntity()).getEventId();
	}

	@Test
	public abstract void testAServiceSendEvent();

	@Test
	public abstract void testCServiceDeleteEvent();

	@Test
	public abstract void testBServiceGetEvent();

	@Test
	public abstract void testMandatoryParameterCheckPart();

	@Test
	public abstract void testValidationOfInvalidEventOrientationData();

	@Test
	public abstract void testValidationOfInvalidEventOutOfSequenceParameter();

	@Test
	public abstract void testValidationInValidDateParameterPart();

	@Test
	public abstract void testValidationOfBlankPayload();

	@Test
	public abstract void testRestAuthValidation();

	@Test
	public abstract void testRestAuthValidationFailure();

	boolean testAuth(ContainerRequestContext mockContext) {
		boolean authStatus = true;
		try {
			testAuthPlugin.filter(mockContext);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			authStatus = false;
		}
		return authStatus;
	}

	static String getAutoGeneratedId() {
		return System.currentTimeMillis() + "_tst";
	}

	String getValidPayloadPart() {
		return "|LIGHT|200|2017-08-27 10:34:55|21|5,6,7";
	}

	String getInValidDatePayloadPart() {
		return "|LIGHT|200|2017-08-s:34:55|21|5,6,7";
	}

	String getBlankPayloadPart() {
		return "";
	}

	String getMandatoryParameterCheckPart() {
		return "||200|2017-08-27 10:34:55|21|5,6,7";
	}

	String geInvalidEventOrderPart() {
		return "|LIGHT|200|2017-08-27 10:34:55|";
	}

	String geInvalidEventOrientationPart() // While Calling Set mock Failover to
											// SQL false
	{
		return "|LIGHT|200|2017-08-27 10:34:55|21|5";
	}

}
